/**
* This file was automatically generated by @oraichain/ts-codegen@0.35.8.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @oraichain/ts-codegen generate command to regenerate this file.
*/

import { CosmWasmClient, SigningCosmWasmClient, ExecuteResult } from "@cosmjs/cosmwasm-stargate";
import { Coin, StdFee } from "@cosmjs/amino";
import {InstantiateMsg, ExecuteMsg, AssetInfo, Addr, Uint128, AddNewBalanceMappingMsg, UpdateBalanceMappingMsg, DeleteBalanceMappingMsg, QueryMsg, AdminResponse, AllCurrentBalancesQueryResponse, BalancesQuery, Asset, QueryBalanceMappingResponse, AssetData, QueryBalancesMappingResponse, BalancesMappingQuery, QueryLowBalancesResponse} from "./OraiBalanceProcessor.types";
export interface OraiBalanceProcessorReadOnlyInterface {
  contractAddress: string;
  queryLowBalances: () => Promise<QueryLowBalancesResponse>;
  queryBalancesMapping: () => Promise<QueryBalancesMappingResponse>;
  queryBalanceMapping: ({
    addr
  }: {
    addr: string;
  }) => Promise<QueryBalanceMappingResponse>;
  queryAdmin: () => Promise<AdminResponse>;
  queryAllCurrentBalances: ({
    limit,
    next
  }: {
    limit?: number;
    next?: string;
  }) => Promise<AllCurrentBalancesQueryResponse>;
}
export class OraiBalanceProcessorQueryClient implements OraiBalanceProcessorReadOnlyInterface {
  client: CosmWasmClient;
  contractAddress: string;

  constructor(client: CosmWasmClient, contractAddress: string) {
    this.client = client;
    this.contractAddress = contractAddress;
    this.queryLowBalances = this.queryLowBalances.bind(this);
    this.queryBalancesMapping = this.queryBalancesMapping.bind(this);
    this.queryBalanceMapping = this.queryBalanceMapping.bind(this);
    this.queryAdmin = this.queryAdmin.bind(this);
    this.queryAllCurrentBalances = this.queryAllCurrentBalances.bind(this);
  }

  queryLowBalances = async (): Promise<QueryLowBalancesResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      query_low_balances: {}
    });
  };
  queryBalancesMapping = async (): Promise<QueryBalancesMappingResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      query_balances_mapping: {}
    });
  };
  queryBalanceMapping = async ({
    addr
  }: {
    addr: string;
  }): Promise<QueryBalanceMappingResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      query_balance_mapping: {
        addr
      }
    });
  };
  queryAdmin = async (): Promise<AdminResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      query_admin: {}
    });
  };
  queryAllCurrentBalances = async ({
    limit,
    next
  }: {
    limit?: number;
    next?: string;
  }): Promise<AllCurrentBalancesQueryResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      query_all_current_balances: {
        limit,
        next
      }
    });
  };
}
export interface OraiBalanceProcessorInterface extends OraiBalanceProcessorReadOnlyInterface {
  contractAddress: string;
  sender: string;
  addBalance: ({
    addr,
    balanceInfo,
    decimals,
    label,
    lowerBound
  }: {
    addr: string;
    balanceInfo: AssetInfo;
    decimals: number;
    label?: string;
    lowerBound: Uint128;
  }, _fee?: number | StdFee | "auto", _memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  updateBalance: ({
    addr,
    balanceInfo,
    decimals,
    lowerBound
  }: {
    addr: string;
    balanceInfo: AssetInfo;
    decimals?: number;
    lowerBound?: Uint128;
  }, _fee?: number | StdFee | "auto", _memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  deleteBalanceMapping: ({
    addr
  }: {
    addr: string;
  }, _fee?: number | StdFee | "auto", _memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  updateAdmin: ({
    newAdmin
  }: {
    newAdmin: string;
  }, _fee?: number | StdFee | "auto", _memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
}
export class OraiBalanceProcessorClient extends OraiBalanceProcessorQueryClient implements OraiBalanceProcessorInterface {
  client: SigningCosmWasmClient;
  sender: string;
  contractAddress: string;

  constructor(client: SigningCosmWasmClient, sender: string, contractAddress: string) {
    super(client, contractAddress);
    this.client = client;
    this.sender = sender;
    this.contractAddress = contractAddress;
    this.addBalance = this.addBalance.bind(this);
    this.updateBalance = this.updateBalance.bind(this);
    this.deleteBalanceMapping = this.deleteBalanceMapping.bind(this);
    this.updateAdmin = this.updateAdmin.bind(this);
  }

  addBalance = async ({
    addr,
    balanceInfo,
    decimals,
    label,
    lowerBound
  }: {
    addr: string;
    balanceInfo: AssetInfo;
    decimals: number;
    label?: string;
    lowerBound: Uint128;
  }, _fee: number | StdFee | "auto" = "auto", _memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      add_balance: {
        addr,
        balance_info: balanceInfo,
        decimals,
        label,
        lower_bound: lowerBound
      }
    }, _fee, _memo, _funds);
  };
  updateBalance = async ({
    addr,
    balanceInfo,
    decimals,
    lowerBound
  }: {
    addr: string;
    balanceInfo: AssetInfo;
    decimals?: number;
    lowerBound?: Uint128;
  }, _fee: number | StdFee | "auto" = "auto", _memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      update_balance: {
        addr,
        balance_info: balanceInfo,
        decimals,
        lower_bound: lowerBound
      }
    }, _fee, _memo, _funds);
  };
  deleteBalanceMapping = async ({
    addr
  }: {
    addr: string;
  }, _fee: number | StdFee | "auto" = "auto", _memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      delete_balance_mapping: {
        addr
      }
    }, _fee, _memo, _funds);
  };
  updateAdmin = async ({
    newAdmin
  }: {
    newAdmin: string;
  }, _fee: number | StdFee | "auto" = "auto", _memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      update_admin: {
        new_admin: newAdmin
      }
    }, _fee, _memo, _funds);
  };
}